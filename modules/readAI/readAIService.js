// modules/readAI/readAIService.js
const slackClient = require('../slack/slackClient');
const { getGeminiSummary } = require('../gemini/geminiService');

async function handleMeetingSummary(payload) {
  try {
    const { title, transcript, host_email, participants } = payload;
    const myEmail = process.env.MY_EMAIL;
    if (myEmail && host_email !== myEmail && !participants?.some(p => p.email === myEmail)) {
      console.log('Ignoring meeting ‚Äî not my meeting and I am not a participant.');
      return;
    }

    const meetingType = determineMeetingType(title, transcript);
    const targetChannel = (meetingType === 'regular') ? process.env.SLACK_SUMMARY_CHANNEL_ID : process.env.SLACK_SPECIAL_CHANNEL_ID;

    console.log(`Generating summary for meeting "${title}"...`);
    
    const aiSummary = await getGeminiSummary({ 
      title, 
      transcript, 
      ...payload, 
      isSpecialMeeting: (meetingType === 'special') 
    });

    const slackSummary = generateSummaryBlocks(title, aiSummary, payload);
    await postSummaryToSlack(slackSummary, targetChannel);

    console.log(`Meeting summary for "${title}" successfully posted to Slack.`);
  } catch (err) {
    console.error('Error in handleMeetingSummary:', err);
    throw err;
  }
}

function determineMeetingType(title, transcript) {
  const specialKeywords = ['daily', 'review', 'retrospective', 'workshop', 'planning', 'che—Åk-in'];
  const titleLower = title.toLowerCase();
  
  if (specialKeywords.some(keyword => titleLower.includes(keyword))) {
    return 'special';
  }
  return 'regular';
}

function generateSummaryBlocks(title, summaryData, payload) {
  const blocks = [];
  blocks.push({ type: 'header', text: { type: 'plain_text', text: `üìÖ ${title || 'Untitled Meeting'}` } });

  // –õ–æ–≥—ñ–∫–∞ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º—ñ—Ç–∏–Ω–≥—ñ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
  if (summaryData.summary && typeof summaryData.summary === 'string') {
      blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–©–æ –±—É–ª–æ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–æ:*\n${summaryData.summary || '–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.'}` } });
      
      if (summaryData.action_items?.length) {
          blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–î—ñ—ó:*\n${summaryData.action_items.map(i => `‚Ä¢ ${i}`).join('\n')}` } });
      }
      
      if (summaryData.analysis) {
          blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–ê–Ω–∞–ª—ñ–∑:*\n${summaryData.analysis}` } });
      }

      if (summaryData.scrum_master_recommendations?.length) {
          const recommendationsText = summaryData.scrum_master_recommendations.map(rec => `*${rec.area}:* ${rec.recommendation}`).join('\n\n');
          blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó Scrum-–º–∞–π—Å—Ç—Ä–∞:*\n${recommendationsText}` } });
      }
  } 
  // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –º—ñ—Ç–∏–Ω–≥—ñ–≤ (–¥–µ—Ç–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç)
  else {
      blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*AI Summary:*` } });

      if (summaryData.summary) {
          if (summaryData.summary.participants?.length) {
              const participantsText = summaryData.summary.participants.join(', ');
              blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–£—á–∞—Å–Ω–∏–∫–∏:*\n${participantsText}` } });
          }
          if (summaryData.summary.goal) {
              blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–ú–µ—Ç–∞ –∑—É—Å—Ç—Ä—ñ—á—ñ:*\n${summaryData.summary.goal}` } });
          }
          if (summaryData.summary.discussion) {
              blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è:*\n${summaryData.summary.discussion}` } });
          }
          if (summaryData.summary.undiscussed_points?.length) {
              const undiscussedPointsText = summaryData.summary.undiscussed_points.map(p => `‚Ä¢ ${p}`).join('\n');
              blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–ù–µ—Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ –ø—É–Ω–∫—Ç–∏:*\n${undiscussedPointsText}` } });
          }
          if (summaryData.summary.off_topic_deviations?.length) {
              const offTopicText = summaryData.summary.off_topic_deviations.map(d => `‚Ä¢ ${d}`).join('\n');
              blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ç–µ–º–∏:*\n${offTopicText}` } });
          }
      }

      if (summaryData.decisions?.decisions_made) {
          blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–ü—Ä–∏–π–Ω—è—Ç—ñ —Ä—ñ—à–µ–Ω–Ω—è:*\n${summaryData.decisions.decisions_made}` } });
      }

      if (summaryData.action_items?.length) {
          const actionItemsText = summaryData.action_items.map(item => 
              `*–ó–∞–≤–¥–∞–Ω–Ω—è:* ${item.task || '‚Äî'}\n*–ö–æ–º—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ:* ${item.assigned_to || '‚Äî'}\n*–¢–µ—Ä–º—ñ–Ω:* ${item.deadline || '‚Äî'}`
          ).join('\n\n');
          blocks.push({ type: 'section', text: { type: 'mrkdwn', text: `*–î—ñ—ó:*\n\n${actionItemsText}` } });
      }

      if (summaryData.key_insights) {
          const insightsText = `*–ö–ª—é—á–æ–≤—ñ –¥–∞–Ω—ñ —Ç–∞ insights:*\n${summaryData.key_insights.data_and_insights || '–ù–µ–º–∞—î'}\n\n*–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:*\n${summaryData.key_insights.next_steps || '–ù–µ–º–∞—î'}`;
          blocks.push({ type: 'section', text: { type: 'mrkdwn', text: insightsText } });
      }

      if (summaryData.final_analysis) {
          const analysisText = `*–§—ñ–Ω–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:*\n${summaryData.final_analysis.analysis || '–ù–µ–º–∞—î'}\n\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:*\n${summaryData.final_analysis.recommendations || '–ù–µ–º–∞—î'}`;
          blocks.push({ type: 'section', text: { type: 'mrkdwn', text: analysisText } });
      }
  }

  blocks.push({ type: 'section', text: { type: 'mrkdwn', text: payload.report_url ? `<${payload.report_url}|View Full ReadAI Report>` : '_Full report URL not provided_' } });
  blocks.push({ type: 'context', elements: [{ type: 'mrkdwn', text: `üìä *Generated by ReadAI + Gemini AI* ‚Ä¢ üïê ${new Date().toLocaleString()}` }] });

  return { text: `Meeting Summary: ${title}`, blocks };
}

async function postSummaryToSlack(summary, channelId) {
    if (!channelId) throw new Error('SLACK_CHANNEL_ID not configured');
    
    const MAX_SLACK_CHARS = 2900;
    let currentMessageBlocks = [];
    let currentMessageLength = 0;
    let messageCounter = 1;
  
    for (const block of summary.blocks) {
      const blockTextLength = block.text?.text.length || 0;
  
      if (currentMessageLength + blockTextLength > MAX_SLACK_CHARS && currentMessageBlocks.length > 0) {
        await slackClient.chat.postMessage({
          channel: channelId,
          text: `–ß–∞—Å—Ç–∏–Ω–∞ ${messageCounter}: ${summary.text}`,
          blocks: currentMessageBlocks,
          unfurl_links: false,
        });
        console.log(`Posted message part ${messageCounter}`);
  
        messageCounter++;
        currentMessageBlocks = [block];
        currentMessageLength = blockTextLength;
      } else {
        currentMessageBlocks.push(block);
        currentMessageLength += blockTextLength;
      }
    }
  
    if (currentMessageBlocks.length > 0) {
      await slackClient.chat.postMessage({
        channel: channelId,
        text: `–ß–∞—Å—Ç–∏–Ω–∞ ${messageCounter}: ${summary.text}`,
        blocks: currentMessageBlocks,
        unfurl_links: false,
      });
      console.log(`Posted final message part ${messageCounter}`);
    }
}

module.exports = { handleMeetingSummary };