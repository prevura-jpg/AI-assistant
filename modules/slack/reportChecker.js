// modules/slack/reportChecker.js

let todayChecked = false;
let lastCheckDate = null;
let slackClientInstance = null; // –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π Slack WebClient

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–¥—ñ–π –≤ –∫–∞–Ω–∞–ª—ñ –∑–≤—ñ—Ç—ñ–≤.
 * –î–æ–¥–∞—î —Ä–µ–∞–∫—Ü—ñ—é 'thumbsup' –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å "Warehouse Statistics".
 * @param {Object} event - –û–±'—î–∫—Ç –ø–æ–¥—ñ—ó –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
 */
async function handleWarehouseReport(event) {
  if (
    event.text &&
    event.text.toLowerCase().includes('warehouse statistics') &&
    !event.subtype
  ) {
    // ‚¨ÖÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ñ—ñ–ª—å—Ç—Ä !event.bot_id, —â–æ–± –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞.
    console.log('Warehouse report detected, adding thumbsup...');
    try {
      await slackClientInstance.reactions.add({
        token: process.env.SLACK_BOT_TOKEN,
        channel: event.channel,
        timestamp: event.ts,
        name: 'thumbsup'
      });
      console.log('‚úÖ Added thumbsup reaction to report message');

      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –∑–≤—ñ—Ç –≤–∂–µ —î
      todayChecked = true;
      lastCheckDate = new Date().toDateString();
    } catch (error) {
      if (error.data && error.data.error === 'already_reacted') {
        console.log('‚ÑπÔ∏è Already reacted with thumbsup');
      } else {
        console.error('‚ùå Error adding reaction to report:', error.message);
      }
    }
  }
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–æ —Å–∫–ª–∞–¥
 * @param {Object} slackClient - –Ü–Ω—Å—Ç–∞–Ω—Å Slack WebClient
 */
function initReportChecker(slackClient) {
  console.log('Initializing report checker...');
  slackClientInstance = slackClient;

  setInterval(() => {
    const now = new Date();
    const currentTime = now.toTimeString().split(' ')[0]; // HH:MM:SS
    const today = now.toDateString();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω–æ –æ 12:30
    if (currentTime === '12:30:00' && (!todayChecked || lastCheckDate !== today)) {
      console.log('‚è∞ 12:30 reached ‚Äî checking if warehouse report arrived...');

      const today12PM = new Date(now);
      today12PM.setHours(12, 0, 0, 0);
      const oldestTimestamp = Math.floor(today12PM.getTime() / 1000);

      slackClient.conversations.history({
        channel: process.env.SLACK_WAREHOUSE_ALERT_CHANNEL_ID,
        oldest: oldestTimestamp,
        limit: 100
      }).then((result) => {
        if (result.ok && result.messages) {
          const hasWarehouseReport = result.messages.some(message => {
            return (
              message.text &&
              message.text.toLowerCase().includes('warehouse statistics') &&
              !message.subtype
              // ‚¨ÖÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ñ—ñ–ª—å—Ç—Ä !message.bot_id
            );
          });

          if (!hasWarehouseReport) {
            console.log('‚ùå No warehouse report found by 12:30, notifying owner...');
            return slackClient.chat.postMessage({
              channel: process.env.SLACK_WAREHOUSE_ALERT_CHANNEL_ID,
              text: `<@${process.env.SLACK_OWNER_USER_REVURA_ID}> –ó–≤—ñ—Ç Warehouse Statistics –Ω–µ –ø—Ä–∏–π—à–æ–≤ –¥–æ 12:30, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏—á–∏–Ω—É.`,
              unfurl_links: false
            });
          } else {
            console.log('‚úÖ Warehouse report was found, no notification needed.');
          }
        }
      }).then(() => {
        todayChecked = true;
        lastCheckDate = today;
        console.log('üìå Report check completed for today');
      }).catch((error) => {
        console.error('‚ùå Error during report check:', error.message);
      });
    }
  }, 1000); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ—Å–µ–∫—É–Ω–¥–∏ (—â–æ–± —Ç–æ—á–Ω–æ –∑–ª–æ–≤–∏—Ç–∏ "12:30:00")
}

module.exports = { initReportChecker, handleWarehouseReport };